diff --git a/node_modules/@react-navigation/drawer/lib/module/views/legacy/Drawer.js b/node_modules/@react-navigation/drawer/lib/module/views/legacy/Drawer.js
index 9792719..42848a0 100644
--- a/node_modules/@react-navigation/drawer/lib/module/views/legacy/Drawer.js
+++ b/node_modules/@react-navigation/drawer/lib/module/views/legacy/Drawer.js
@@ -1,7 +1,7 @@
 function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
 import * as React from 'react';
 import { I18nManager, InteractionManager, Keyboard, Platform, StatusBar, StyleSheet, View } from 'react-native';
-import Animated from 'react-native-reanimated';
+import Animated, { useSharedValue } from 'react-native-reanimated';
 import DrawerProgressContext from '../../utils/DrawerProgressContext';
 import { GestureState, PanGestureHandler } from '../GestureHandler';
 import Overlay from './Overlay';
@@ -48,8 +48,8 @@ const SPRING_CONFIG = {
   restDisplacementThreshold: 0.01,
   restSpeedThreshold: 0.01
 };
-const ANIMATED_ZERO = new Animated.Value(0);
-const ANIMATED_ONE = new Animated.Value(1);
+const ANIMATED_ZERO = useSharedValue(0);
+const ANIMATED_ONE = useSharedValue(100);
 export default class DrawerView extends React.Component {
   componentDidUpdate(prevProps) {
     const {
@@ -366,13 +366,8 @@ export default class DrawerView extends React.Component {
       style: overlayStyle,
       accessibilityElementsHidden: !isOpen,
       importantForAccessibility: isOpen ? 'auto' : 'no-hide-descendants'
-    })), /*#__PURE__*/React.createElement(Animated.Code, {
-      // This is needed to make sure that container width updates with `setValue`
-      // Without this, it won't update when not used in styles
-      exec: this.containerWidth
-    }), drawerType === 'permanent' ? null : /*#__PURE__*/React.createElement(Animated.Code, {
-      exec: block([onChange(this.manuallyTriggerSpring, [cond(eq(this.manuallyTriggerSpring, TRUE), [set(this.nextIsOpen, FALSE), call([], () => this.currentOpenValue = false)])])])
-    }), /*#__PURE__*/React.createElement(Animated.View, {
+    })),
+      /*#__PURE__*/React.createElement(Animated.View, {
       removeClippedSubviews: Platform.OS !== 'ios',
       onLayout: this.handleDrawerLayout,
       style: [styles.container, {
