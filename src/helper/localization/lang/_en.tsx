export const en = {
  omsMain: {
    statu: "Status",
    orders: "Orders",
    collectionList: "Collection List",
    packingList: "Packing List",
    cargoSet: "Cargo Consensus",
    productNotFound: "Products Not Found",
    pastTransactions: "Past Transactions",
    wayBillStatus: "Waybill Status",
  },
  OmsBarcodeSearchBar: {
    barcodeScanning: "Barcode Scanning",
    scanOrCode: "Scan or Enter Product Code",
    qrRead: "QR Read",
    enterQR: "Enter QR"
  },
  OmsCargoConsensusDatePopup: {
    orderDate: "Order Date",
    ok: "Ok",
    cancel: "Cancel",
  },
  OmsFilterCard: {
    sameDayHome: "Same-day Home Delivery",
    sameDayCome: "Same-day Store Delivery",
    homeCargo: "Home Delivery",
    supplySource: "Supply Source",
    filter: "Filter",
    selectAll: "Select All",
    assignSelected: "Assign Selected",
    orderQuantity: "Quantity Order Listed",
    refresh: "Refresh",
    assignment: "Assignment",
  },
  OmsOrderCard: {
    quantity: "Quantity",
    closeDetails: "Close Details",
  },
  OmsOrderTimeCard: {
    product: "Product",
    sameDayCome: "Same-day Store Delivery",
    sameDayDelivery: "Same-day Home Delivery",
    homeCargo: "Home Delivery",
  },
  OmsPackageCard: {
    product: "Product",
    packed: "Packing",
    allConfirm:
      "I approve that all the products had been controlled by me and they are ready to be shipped to customer.",
    parcelBagScanned: "Scan all products before choosing plastic bags/boxes",
    selectParselBag: "Select Plastic Bag/Box",
    whyChooseList: "Why did you choose from the list?",
    printIrsaliye: "Publish Waybill",
    pleaseReadBarcode: "Please Bag/Box Scan Barcode",
    requiredOrder: "{{qty}} pieces of this product are required in the order",
    enterNumberPackage: "Please Enter Number of Packages",
    packageCannotBeLess:
      "The number of packages cannot be less than the number of suitcases",
    packageCannotBeGreater:
      "The number of package products cannot be greater than the number of",
    parcelPackageBarcode: "Parcel/Package Barcode",
    packageCount: "Number of Parcels / Packages",
    packageCountInfo:
      "If all products do not fit in one package/case, they must be shredded. Please indicate how many separate packages/packages you will put the products in",
    packageAlreadyBeenMade:
      "Package/Bag selection has already been made for this order",
    packageNotCountInfo:
      "It is obligatory to send channel orders in a single parcel/bag, and in case of need for order fragmentation, ecomlojistik.operasyon@flo.com.tr should be contacted",
    packageQrNotCorrect: "The QR you read does not belong to this product",
    packageQrMissing: "Read all QR's before choosing a parcel / bag",
  },
  OmsQuantityPopup: {
    or: "Or",
    collected: "Will be marked as quantity order collected",
    wilBeMarked: "and the others will be marked as",
    collectedLater: "Reemaining products will be collected later",
  },
  OmsReaseonRadios: {
    selectReason: "Select Reason from the list",
    continue: "Continue",
  },
  ProductPickCard: {
    product: "Product",
    min: "Min",
  },
  ProductDetail: {
    color: "Color",
    date: "Date",
    orderNo: "Order Number",
    barcode: "Barcode",
    cancelOrder: "Cancel the Order",
    cancel: "Cancel",
    areYouSure: "Order will be cancelled, are you sure?",
    productStatuNotCancel: "Product status is not able to be cancelled",
    kdvAmount: "Amout with taxes(KDV)",
    cancelOrderForStore: "Order cancellation from store",
    inquireStock: "Inquire Stock"
  },
  OmsCargoConsensus: {
    cargo: "Cargo",
    omsBarcode: "OMS Barcode",
    AcceptNo: "Acceptance Number",
    cargoWaiting: "Cargo Waiting List",
    printAll: "Print All",
    printSelected: "Print Selected",
    printSuccesful: "Print is successful",
    selectCargo: "Select Cargo Company",
    numberOrderList: "Quantity Order Listed",
    deSelect: "Deselect",
    selectAll: "Select All",
    generateBarcode: "Generate Barcode",
    generateConsensus: "Generate Consensus",
    productList: "Product List",
    quantity: "Quantity",
    bodySize: "Size",
    color: "Color",
    brand: "Brand",
    search: "Search",
    iConfirmThatTheCourierHasArrived: "I confirm that the courier has arrived",
    readBeforeOrder: "This order has been read before",
    orderScanned: "The package you scanned belongs to a fragmented order. It will not be marked until you scan all {{qty}} pieces",
    seeContent: "See Content",
    qtyReadPackage: "You Read {{qty}} Packages",
    pleaseReadIBMOrOrderNo: "Please Read IBM/Order Number",
    readOrders: "Read Orders",
  },
  OmsDashboard: {
    orders: "Orders",
    assigned: "Assigned",
    notAssigned: "Not Assigned",
    notAssignedOrdersDistribution: "Distribution of \nNot Assigned Orders",
    sameDayHomeDelivery: "Same-day Home Delivery",
    sameDayComeAndGet: "Same-day Store Delivery",
    homeDeliveryByCargo: "Home Delivery",
    myCollectionList: "My Collection List",
    collected: "Collected",
    notCollected: "Not Collected",
    unCollectedDeliveryOfOrders: "Distribution of \nNot Collected Orders",
    packingList: "Packing List",
    packed: "Packed",
    notPacked: "Not Packed",
    unPackedScatterOfOrder: "Distribution of \nUnpacked Orders",
  },
  OmsOrders: {
    assignToSelected: "Assign to Selected",
    cancel: "Cancel",
    noPendingOrders: "No Pending Orders",
    day: "d",
    hour: "h",
    min: "min",
    justNow: "Just Now",
  },
  OmsPackageList: {
    numberOfOrdersListed: "Number of Orders Listed",
    orderNotFound: "Order Not Found",
    afterThisOperationAreyousure:
      "After this operation, the order cannot be canceled. Are you sure?",
  },
  OmsPickList: {
    sameDayHomeDelivery: "Same-day \nHome Delivery",
    sameDayComeAndGet: "Same-day \nStore Delivery",
    homeDeliveryByCargo: "Home Delivery",
    productNotFoundInTheList: "Product you scanned is not found in the list",
    collect: "Collect",
  },
  OmsOrderHistory: {
    search: "Search",
    orderNo: "Order Number",
    actionDate: "Action Date",
    cargoConsensusDate: "Cargo Con. Date",
    inOrderStatus: "In Order Status",
    collectionStatus: "Collection Status",
    packagingStatus: "Packaging Status",
    timeDistribution: "Time Distribution",
    transactionDate: "Transaction Date",
  },
  OmsOrderHistoryActions: {
    orderCreated: "Order Created",
    addedCollectionList: "Added to Collection List",
    package: "Package",
    cancel: "Cancel",
  },
  OmsWaybillStatus: {
    startDate: "Start Date",
    endDate: "End Date",
    orderNo: "Order Number",
    status: "Status",
    time: "Time",
    cancel: "Cancel",
    printBarcode: "Print Barcode",
    completeTheOrder: "Complete the Order",
    startTime: "Start Time",
    endTime: "End Time",
  },
  OmsNotFoundProducts: {
    startDate: "Start Date",
    endDate: "End Date",
    search: "Search",
    quantity: "Quantity.",
    cancelReason: "Cancel Reason",
    orderNo: "Order Number",
    cancel: "Cancel",
    cancelDate: "Cancellation Date",
  },
  OmsStoreChiefReport: {
    noItemsList: "No Items to list",
    mboxAreUSure:
      "All of the orders from XXX user's collection list will be added to the pool, are you sure?",
    cancel: "Cancel",
    ok: "Continue",
    throwThePool: "Throw to pool",
    thereIsPendingOrder: "There are pending orders",
    collectList: "In Collection List",
    packedList: "In Packed List",
    processCompleted: "Process Completed",
    total: "Total",
  },
  omsErrorReasons: {
    defective: "Defective",
    misfire: "Missfire",
    productNotFound: "Product Not Found",
    sold: "Sold",
    imageIsWrong: "Image is Wrong",
  },
  omsService: {
    ordersCannotCanceled:
      "The order cannot be canceled because the packing slip for this order has been cut",
    orderCancelingError: "An error occurred while canceling the order",
    cancelTransactionQuestion:
      "There is an order in progress, you need to complete or cancel the transaction.\nDo you want to cancel the transaction now?,",
    productHasFound: "Item found.",
    productAvailable: "Product available",
    allOrdersPackingCompleted:
      "There are different items in the orders with the product/products, it will not appear in the packing list until they are all finished.",
    selectOrderAssign: "Select commands to assign",
    packageTransactionQuestion:
      "There is currently an order that is still being packaged. Do you want to pack the relevant order later?",
    configurePackagegingProcess:
      "Configure the printer before starting the packaging process",
    scannedBarcocedIncorrect: "The scanned barcode is incorrect",
    totalDecisQuestion1: "Total decisions of the products of your order",
    totalDecisQuestion2: "decisions of the package you scanned",
    totalDecisQuestion3: "Do you approve?",
    parcelAndBagScanSuccess: "Successful package/bag barcode scanning",
    selectParselAndBagWarning:
      "You cannot choose a parcel bag because the label for this order is printed!",
    suppressionFailed: "Deletion failed, try again later.",
    printingFailed: "Printing failed",
    configurePrinterBeforeWaybill:
      "Configure the printer before printing the consignment note.",
    cancel: "Cancel",
    cancel2: "Cancel",
    piecesAreRequiredProduct:
      "{{qty}} pieces are required of the product you have scanned in this order.",
  },
  menu: {
    help: "Help",
    other: "Other",
    findProduct: "Find Product",
    document: "Document",
    home: "Main Page",
  },
  inStoreOrdering: {
    basketTitle: "My cart",
  },
  floSmsValidationModal: {
    approve: "Confirm",
    cancel: "Cancel",
    validationCode: "Confirmation code",
    information: "Enter the code sent by SMS",
  },
  floAutoComplete: {
    defaultPlaceholde: "Search Neighbourhood,street",
  },
  loginScreen: {
    username: "User Name",
    password: "Password",
    pleaseWait: "Please wait",
    signIn: "Login",
    welcome: "Welcome",
    otherLogin: "Click to Login with Another Account"
  },
  profileDetailScreen: {
    personalInformation: "Personal Information",
    name: "Name",
    birthDay: "Date of Birth",
    email: "E-mail address",
    efficiencyRecord: "Registration number",
    department: "Position",
    position: "Duty",
    expenseCentre: "Cost center",
    expenseCentreName: "Cost center name",
    jobStartDate: "Job Start Date",
  },
  profileScreen: {
    personalInformation: "Personal Information",
    logOut: "log out",
    profile: "profile",
  },
  crmMainScreen: {
    title: "Customer Relationship Management ",
  },
  basketCompleteScreen: {
    sentMessage: "Order link sent",
    gotoHome: "Return to home screen",
  },
  basketEmpty: {
    emptyMessage: "There are no product in your cart",
  },
  basketScreen: {
    title: "My cart",
    size: "Number: ",
    try: "Turkish Lira",
    remove: "Delete",
    campaignCode: "Campaign code",
    apply: "Apply",
    product: "Product",
    total: "Total: ",
    shipmentPrice: "Shipping fee: ",
    subTotal: "Subtotal",
    orderSummary: "Order summary",
    confirmCard: "Confirm Cart",
  },
  completeBasketScreen: {
    pleaseWait: "Please wait",
    validateUser: "Customer verification",
    title: "My cart",
    phone: "Mobile Phone",
    apply: "Confirm",
  },
  orderReceivedScreen: {
    total: "Total: ",
    shipmentPrice: "Shipping fee: ",
    subTotal: "Subtotal",
    discount: "Discount",
    orderSummary: "Order summary",
    try: "Turkish Lira",
    size: "Body size: ",
    count: "Number: ",
    successMessage: "Payment summary sent successfully via SMS",
  },
  documentScreen: {
    emptyMessage: "The item to display was not found.",
    file: "File",
    picture: "Photograph",
    title: "Document",
  },
  findBarcode: {
    manual: "Query manually",
    enterBarcode: "Scan barcode number",
    check: "Inquire",
    title: "Inquire product",
    camera: "Camera",
  },
  findBarcodeManual: {
    enterBarcode: "Enter barcode number",
    enterGenericCode: "Enter Generic Number",
    check: "Inquire",
    title: "Inquire product",
  },
  foundProduct: {
    emptyStock: "None",
    stock: "Available",
    quantity: "Number:",
    color: "Colour",
    storeStock: "Store stock",
    priceAndLabel: "Price and Tag",
    firstCashPrice: "First cash price",
    cashPrice: "cash price",
    firstInstallmentPrice: "First installment price",
    installmentPrice: "İnstallment price",
    printLabel: "print label",
    priceEcom: "Price (e-commerce)",
    addBasket: "Add to cart",
    productFeatures: "Product features",
    brand: "Brand",
    model: "Model",
    barcode: "Barcode",
    sku: "Generic Number",
    gender: "Gender",
    title: "Product detail",
    omcStoc: "Supply from OMC stock",
    findStore: "Serch store",
    outletAndSeason: "Outlet/Season",
    productCategory: "Product Category",
    productClass: "Product Class",
    productClassInfo: "Product Class Information",
    baseMaterial: "Base Material",
    leatherInfo: "Leather Information",
  },
  helpScreen: {
    title: "Help",
    contactUs: "Contact us",
    links: "helpful links",
  },
  linksScreen: {
    title: "Helpful links",
    linkNotFound: "No defined links to your account were found.",
    linksLoading: "Loading links",
  },
  homeScreen: {
    noRecord: "There are no active announcements.",
    loadingAncs: "loading",
  },
  moreScreen: {
    title: "Other",
    crmMainLink: "Customer Relationship Management Complaint management",
    printerConfig: "Label",
    easyReturn: "easy return",
  },
  printerConfig: {
    listDeviceError: "there was a problem listing Bluetooth devices.",
    pleaseSelectDevice: "Please select device",
    pleaseSelectConfig: "Please Select Label Confirmation",
    deviceNotFound: "device not found",
    setSetingsAndPrintBarcode: "Send settings and print barcodes.",
  },
  announceMiddlewareAlerts: {
    fileLoadExceptionMessage: "The files could not be loaded.Try again later.",
    fileSystemPermissionError:
      "You do not have permission to write files.Review your app privileges.",
    onlyFiles: "Only Documented",
    noNotification: "No Notification",
  },
  authMiddlewareAlers: {
    userNameOrPasswordIncorrect: "Username or password incorrect",
  },
  messageBox: {
    ok: "OK",
    cancel: "Cancel",
    delete: "Delete",
    warning: "WARNING",
    information: "INFORMATION",
    danger: "DANGER",
    smsValidationCode: "SMS VALIDATION CODE",
    validate: "VALIDATE",
    resened: "RESend",
    stockOut1: "The product is out of stock",
    stockOut2: "",
    stockOut3: " to cart",
    stockOut4: " do  you want to add?",
    add: "ADD",
    settings: "Settings",
    allCollectOrders:
      "You have collected all the products of the numbered order",
    allCollect: "You Collected All",
    customerBasketNo: "Customer Cart Number",
    exit: "Quit",
    refundComplete:
      "In order to continue with the refund, the transfer registration must be completed.",
    fitTicket:
      "In order for us to assist you, please take a screenshot of this warning and create a Ticket on FIT.",
    verificationNotValid: "Your verification code is not valid"
  },
  or: "or",
  errorMsgs: {
    printerConnectionLost: "Printer connection closed. Reconnect.",
    wrongUsernameOrPassword: "Username or password incorrect",
    unexceptedError: "Something went wrong.Please try again.",
    printerUnexceptedError:
      "A problem has occurred with the printer. Turn the printer off and re-establish connections.",
    allBasketRemovedQuestion:
      "The items in the cart will be deleted.Are you sure?",
    sessionTimeout: "Your session has timed out.Please login again.",
    removeSelectedBasketQuestion:
      "The cart you selected will be deleted.Are you sure?",
    pleaseEnterValidBarcode: "Please enter a valid barcode number.",
    pleaseEnterValidGenericCode: "Please enter a valid generic number.",
    sapServiceError: "SAP inventory service could not be reached",
    ecomServiceError: "ECOM inventory service could not be reached",
    productNotFound: "The product was not found",
    filePermissionError:
      "we are not authorized to view files. Want to check app privileges.",
    wrongStockAlert:
      "Error in stock information.this product cannot be added to the cart.",
    wrongAddress: "Fill in the address information completely.",
    emailRequiredNewCustomer:
      "E-mail address is required when creating a new customer.",
    sentToGenius:
      "The order has been sent to the genius screen .You can continue your transactions from there.",
    recordSuccess: "registration successful",
    recordUpdateFail: "The record could not be updated.",
    enterBarcode: "Barkod MSGS/ENTER BARCODE",
    ecomStockOut: "Insufficient e-commerce stock",
    completeLabelConfig: "Label configuration complete",
    customerNameNotEmpty: "Customer name or surname cannot be empty.",
    customerPhoneNotEmpty: "Phone number cannot be empty",
    customerAddressNotEmpty: "Address information cannot be empty",
    basketCloseAlert: "Coming out of the basket. Are you sure ?",
    systemCurrentlyMaintenance:
      "System is currently under maintenance, Please try again later",
    auth: {
      employeeInfoEmpty:
        "Unable to access user information, contact the Support team.",
      incorrectUsernameOrPassword: "Username or password is incorrect",
      tokenNotFound: "Your session has timed out. Please login again.",
    },
    omsStockNotFound: "Stock inquiries cannot be made for this product"
  },
  easyReturnFindFiche: {
    title: "There is no barcode information.",
    docNumber: "document no",
    returnNumber: "return code",
    scanDocNumber: "open camera to scan document barcode",
    scanReturnNumber: "open the camera to scan the return code barcode.",
    enterDocNumber: "enter document number",
    enterReturnNumber: "enter return code/order number",
    query: "Inquire",
    findDocument: "find document",
    enterAINo: "defective product inspection number",
    AINo: "defective product inspection ",
  },
  easyReturnCamera: {
    scanDocNumber: "scan document barcode",
    scanReturnNumber: "scan return code ",
    infoText: "show the barcode to the camera",
    scanAINo: "scan the defective product inspection number",
    dontCameraAuthority: "You do not have camera authorization",
  },
  easyRerturnFindFicheManual: {
    title: "Find document",
    store: "select store",
    date: "date",
    paymentType: "choose payment type",
    scanProductBarcode: "turn on the camera to scan the product barcode.",
    enterProductBarcode: "enter the product barcode.",
    query: "Inquire",
    dtpOk: "Ok",
    dtpCancel: "clean",
    dtpTitle: "select date",
    enterGsm: "phone number",
  },
  easyReturnFicheList: {
    continue: "continue",
    ficheNumber: "document number",
    customerName: "customer name",
    price: "Total",
    date: "date",
    phone: "Number:",
    size: "Body size: ",
    quantity: "Quantity: ",
    orderNotCancelled: "this receipt is non-refundable",
    title: "plug list",
    str: "store",
  },
  easyReturnSelectReturnType: {
    title: "return method",
    total: "total",
    remain: "remainder",
    reminder: "change",
    printDoc: "print expense slip",
    completeTransaction: "complete the refund",
    headerTotalAmount: "total amount to be refunded",
    selectPaymentType: "choose return method",
  },
  easyReturnSelectProduct: {
    infoText1: "pay attention that you exchange unused and labeled products..",
    infoText2: "pay attention that you exchange unused and labeled products..",
    infoText3:
      "Only items that have not been shipped can be cancelled.When the cancellation process is provided, all products that have not been shipped will be cancelled.",
    size: "Body size",
    quantity: "Quantity",
    price: "sale price",
    sellPrice: "Sale price",
    returnReason: "please choose reason for return",
    pickQuantity: "please choose qty",
    title: "product list",
    return: "return",
    change: "change",
    cancel: "cancel",
    productBarcode: "product barcode",
    pleaseBarcodeScan:
      "please write the barcode of the product to be processed or scan with the camera.",
    pleaseSelectProduct: "please select the product you want to return",
    continueTo: "continue with the product",
    selectProduct: "select product",
  },
  headerComponent: {
    search: "search",
  },
  iso: {
    baskets: "my carts",
    orderSummaryInfo: "you can review the cart summary",
    noActiveBasket: "there are no active cart",
    basket: "cart number: %{basketCount}",
    creator: "constituent: %{creator}",
    basketTitle1: "my carts",
    basketTitle2: "cart number :  %{basketNo}",
    basketTitle3: "my cart : (%{basketNo})",
    color: " colour:",
    size: "Size: ",
    omcStock: "OMC stock supply",
    orderSummary: "Order summary (%{productCount}",
    total: "Total: ",
    addCustomerAddress: "add customer address",
    payment: "payment transactions",
    loadingBaskets: "carts are loading",
    order: "cart number :",
    omcMessage:
      "There are products supplied from the store in your cart, these products must be delivered to the customer now",
    omsOmniStockError:
      "In order for your cart to be sent to the checkout, at least 1 OMNI Stock must be added",
    ok: "Ok",
    cancel: "Cancel",
    oneByeOneChange: "One to one exchange process"
  },
  easyReturnBarcodeHearder: {
    customerName: "Customer Name: ",
  },
  easyReturnBrokenProductCompletePopup: {
    validationSms: "Firstly, SMS verificatio0n is required.",
    printDocument: "Firstly,you must print the defective product document.",
    sendAgain: "RESend",
    sendValidationCode: "send verification code",
    validationCode: "verification code",
    approve: "Confirm",
    completeTransaction: "complete the transaction",
    recordCreated: "a defective product record numbered has been created.",
    idesDocumentRecordPopupMessageBox: "Once the process is completed, no changes can be made. Do you confirm that all transactions have been completed completely?"
  },
  easyReturnProductCard: {
    continueWithProduct: "you can continue with only one defective product.",
    pleaseGiveReason: "please indicate the reason for the return.",
  },
  servicesApplicationGlobalService: {
    reopenTheApp:
      "you must reopen the application for the changes you have made to be applied.",
  },

  servicesEasyReturnService: {
    productsAreHere: "products are here",
    voucherNotFound: "couldn!t find any plug.",
    errorTryAgain: "An unexpected error has occurredd. Try again later.",
  },
  cancellationScreen: {
    smsApprove: "SMS Verification",
    smsApproveCode: "Please \nenter verification code",
    verify: "Verify",
    resend: "Resend",
    orderNo: "Order No",
    billNo: "Bill No",
    customerName: "Customer Name",
    customerPhone: "Customer Phone Number",
    date: "Date",
  },
  crmCaseDetailScreen: {
    noChange: "no changes were made.",
    selectMissionStatus: "you must select the task state.",
    enterDescription: "solution description is required.",
    task: "Duty",
    taskDetails: "Trequest details",
    beingRecorded: "being recorded",
    save: "save",
  },
  crmCrmMainScreen: {
    loading: "recordings are loading..",
    noOpenRecordsFound: "no open records found.",
  },
  crmTaskView: {
    noPhotoAllowed:
      "does not have permission to access photos .Turn on the access authorization in the settings and try again.",
    searchJobStatus: "you can search for task status.",
    chooseTheRightTeam: "the right team can be selected or you can search.",
  },
  modalRoleGroup: {
    SoryNoAuthorization: "sorry , you are not authorized to view this screen.",
  },
  newVersion: {
    goto: "go to new version",
    requiredNewVersionMessage: "forced update available",
    updateAwailable: "there is a new version of the application.",
    jailBrokenMessage:
      "The application is closed for use with JailBreak, Root, Emultor.",
    jailBrokenOkButton: "Ok",
    appTypeRequired:
      "A new version of FLO Digital has been launched.. To continue using the application, please download it now",
  },
  crmCaseCard: {
    createdon: "Creation Date :",
    ticketNumber: "Ticket Number",
    remainingTime: "Remaining Time",
  },
  crmCustomerComplaintList: {
    newRecord: "Create New Record",
    active: "Active",
    solved: "Solved",
    cancelled: "Canceled",
    customerComplaintManagement: "Customer Complaint Management",
    title: "Customer Complaint Management",
    demandFilter: "Demand Status Filter",
    enterPhone: "Write Phone Number",
    noRecord: "No Records Found",
  },
  crmNavSceen: {
    caseManagement: "Complaint Management",
    customerComplaintManagement: "Customer Complaint Management",
    checkOrder: "Order Inquiry",
  },
  crmFindOrderScreen: {
    orderFicheNo: "Order/Receipt Number",
    title: "Order Inquiry",
    or: "or",
    ficheNumber: "Receipt Number",
    enterNumber: "Enter Number",
    execCheckOrder: "Inquiry",
    checkOrder: "Order Inquiry",
    ficheNo: "Fiche Number",
    findFiche: "Find Fiche",
  },
  crmOrderDetailScreen: {
    title: "Order Detail",
    ficheNumber: "Receipt Number",
    createdStore: "Shop that Created Order",
    shippingStore: "Place of Supply",
    supply: "Supply ",
    status: "Situation ",
    phone: "Phone",
    productQuantity: "{{qty}} pcs Product",
    customerName: "Customer Name-Surname ",
    orderNum: "Order Number",
    createdon: "Creation Date :",
    amount: "Amount",

    totalAmount: "Total Amount",
  },
  crmCrmCreateCustomerComplaint: {
    errorMessage: "Something Went Wrong",
    cancel: "Cancel",
    settings: "Settings",
    filePermissionError:
      "we are not authorized to view files. Want to check app privileges.",
    newCustomerComplaint: "New Customer Complaint",
    cancelCustomerComplaint: "Customer Complaint (Cancelled)",
    customerComplaint: "Customer Complaint",
    store: "Store",
    eCommerce: "E-Commerce",
    complaintTitle: "Title",
    firstName: "Customer Name",
    lastName: "Customer Surname",
    orderNum: "Order Number",
    CustomerPhone: "Customer Phone",
    solveTextPlaceholder: "Solution Description",
    description: "Explanation",
    photoWarning:
      "**Added photos cannot be deleted or changed after recording, Maximum 2 photos can be added.",
    assigneeTeam: "Assigned Team",
    update: "Update",
    cancelRequest: "Cancel Request",
    save: "Save",
    requestType: "Select Request Type",
  },
  crm: {
    createdDate: "creation date: {{createDate}}",
    serviceRequesNum: "service request number",
    orderNum: "order number",
    shipmentNum: "shipment number",
    productNum: "product number",
    uibNum: "product inspection document number",
    title: "topic",
    assigneeTeam: "assigned team",
    detail: "detail",
    caseDetail: "complaint details  ",
    save: "save",
    checkOrder: "order inquiry",
    enterNumber: "enter number ",
    execCheckOrder: "Inquire",
    caseManagement: "complaint management",
    caseNotFound: "No open records found.",
    productQuantity: "{{qty}}  pieces productn",
  },
  intro: {
    next: "next step",
    complete: "finish it",
    intro1: {
      title1: "to Flo Digital",
      title2: "Welcome!",
      description:
        "we are so happy you!ve joined the Flo family.We have prepared this application for you to mke your work easier.",
    },
    intro2: {
      title1: "you need",
      title2: "we are always with you.",
      description:
        "we will always be there for you to respond instantly to your customers requests",
    },
    intro3: {
      title1: "Lets,",
      title2: "Lets start!",
      description: "Come on, be the shining star of the store.",
    },
  },
  isoProduct: {
    color: "Colour",
    size: "Size",
    priceLabel: "Price label",
    firstPrice: "First cash price",
    salesPrice: "Sale price",
    firstInstallmentPrice: "First installment price",
    installmentPrice: "Installment price",
    storeStock: "Store stock",
    ecomStock: "OMNI STOCK",
    findStore: "Search store",
    outletDontSoldMessage: "Outlet products are not sold through FLO Digital",
    barcode: "Barcode",
    generic: "Generic",
    alternativeProducts: "Alternative Products",
    hide: "Hide",
    seeAll: "See All",
  },
  isoCamera: {
    permissionError: "camera access is not authorized.",
  },
  isoNewAddress: {
    title: "Add new address",
    phonePlaceHolder: "find address with customer phone number",
    shipmentAddressCreate: "add delivery address",
    newCustomer: "New customer",
    name: "Name",
    lastname: "Surname",
    email: "E-mail",
    phone: "Number",
    city: "Province",
    district: "District",
    neighbourhood: "Neighbourhood",
    address: "Address",
    save: "Save Address",
  },
  isoBasket: {
    color: "Colour: ",
    size: "Size: ",
    awailableStockMessage:
      "Maximum {{qty}} pieces of this product can be purchased.",
    storeStock: "Store stock",
    ecomStock: "OMNI STOCK",
    totalPrice: "total price",
    editCustomerAddress: "edit customer address",
    addCustomerAddress: "Add customer address",
    paymentProcess: "payment transaction",
    completeBasket: "Confirm Cart",
    showMssMessage:
      "There are changes in the cart. Before continuing, please re-send the notification sms to the customer by pressing the payment button",
    deleteProductMessage:
      "Are you sure %{productName} will be removed from your cart?",
    customerCartNo: "Customer Cart Number",
    ok: "Ok",
  },
  isoBarcodeCheck: {
    myBaskets: "My carts",
    myBasketsDescription: "you can review the cart summary",
    barcodeNumber: "barcode number",
    query: "Inquire",
    genericEnterValid: "Please enter a valid generic number",
    barcode: "Barcode",
    generic: "Generic",
    genericEnter: "Enter Generic Number",
  },
  isoAddressList: {
    title: "addresses",
    newAddress: "+ add new address",
    next: "next step",
    selected: "selected",
  },
  isoStoreList: {
    inStock: "Stok Var",
    lastStock: "Last {{stock}} Stock",
    stockOut: "Stock Out",
    stock: "{{stock}} Stock",
  },
  drawer: {
    logout: "Log out",
  },
  tabbar: {
    home: "HOME",
    processBtnTxt: "OPERATIONS",
  },
  mainScreen: {
    announcement: "Announcements",
    links: "Helpful Links",
    crm: "CRM",
    printer: "Tag Printer",
    welcome: "Welcome",
    find: "Search for something...",
    oms: "OMS",
  },
  warehouseRequest: {
    waiting: "Waiting",
    completed: "Completed",
    created: "Created",
    title: "Product Request from Warehouse",
    requestNote: "Sales Representative Note : %{note}",
    completeNote: "Warehouse Staff Note: %{note}",
    requestTitleWithStatus: "Product Request - %{status}",
    statusWaiting: "Waiting",
    statusFound: "Status: Item Found",
    statusStatusNotFound: "Status: Item Not Found",
    requestTitle: "Product Request",
    completedFrom: "Process completed by %{person}. %{dateStr}",
    requestMessage:
      "The product with %{barcode} barcode, %{model} model, %{color} color, %{size} size %{sku} code was requested by %{employeeName}",
    takeTransaction: "Continue processing",
    foundProduct: "Product Found",
    notFoundProduct: "Product Not Found",
    iso: {
      requstButtonTitle: "Request From Warehouse",
      enterNote: "Please enter description",
      assignPersonNotFound: "No personnel found to assign",
      selectAssignPerson: "Choose the person to be assigned",
      warehouseRequestCreatedMessage: "Repository record created successfully",
      warehouseRequestCreatedError: "Repository record could not be created",
      warehouseRequestCreatedSelectPersonMessage:
        "Personnel must be selected before the warehouse request is created",
      completeButtonText: "Complete the transaction",
      cancel: "Cancel",
      ok: "Ok",
      warehouseRequestNoProduct: "There is no personnel defined in the warehouse for this product"
    },
    productDelivered: "The product has been delivered",
    productNotDelivered: "The product could not be delivered",
    requestCancelledMessage: "The request will be denied, are you sure?",
    yes: "Yes",
    no: "No",
    cancel: "Cancel",
    createdAt: "Creation date : %{date}",
    noRecordsList: "No Records to List",
    cancelReason: "Reason of Cancellation",
    aReasonMustBeChosen:
      "A reason must be chosen from the list if the product is not found.",
    operationFailed: "Operation failed",
    operationSuccessfully: "Operation Successfully Completed",
    digitalStore: "Digital Store",
  },
  basketPriceZeroError:
    "This product cannot be added to the cart, there is an error in the product information",
  cancelList:
    "Only your unshipped products can be cancelled. If you complete the cancellation process, all products of the order will be cancelled",
  be: {
    errors: {
      cardBilled:
        "No changes can be made to this cart as payment has been received",
      basketCheckout:
        "Payment for this basket continues on the cashier screen, no change can be made",
      basketNotFound: "Cart not found",
    },
  },
  completionOfSalesShortageMainScreen: {
    title: "Completion Of Sales Shortage",
    titleTwo: "Out Of Sale Product List",
    comboBoxOne: "Category",
    comboBoxTwo: "Product Group",
    comboBoxThree: "Brand Name",
    comboBoxFour: "Gender",
    textInput: "Scan or Enter Product Code",
    start: "Start",
    end: "Finish",
    color: "Colour:",
    size: "Size:",
    date: "Date:",
    stockQuantity: "Stock Quantity:",
    orderNumber: "Order No:",
    barcode: "Barcode:",
    buttonOne: "Put on sale",
    buttonTwo: "Choose Cause From The List",
    popUpButton: "Continue",
    buttonThree: "Search",
    buttonFour: "Creating a Work Order",
    notFound: "No products found to list",
    createDate: "Date:"
  },
  completionOfSalesShortageAlarmScreen: {
    menuButtonText: "Automatic Work Order Setting",
    mondayShort: "MON",
    tuesdayShort: "TUE",
    wednesdayShort: "WED",
    thursdayShort: "THU",
    fridayShort: "FRI",
    saturdayShort: "SAT",
    sundayShort: "SUN",
    emptyStateText: "You don't have a reminder.",
    deleteItemsCount: "{{qty}} items were selected",
    save: "Save",
    hour: "Hour",
    minute: "Minute",
    dateNotSelectError: "Please choose a day."
  },
  report: {
    totalSalesCount: "",
    totalPerformance: "",
    totalDepositedShelfPercentage: "",
    completionOfSalesShortageReport: "Sales Shortage Reports",
    salesLossReport: "Sales Loss Reports",
    floDigitalUsageReport: "Flo Digital Usage Reports",
    startDateError: "Start date cannot be greater than the end date.",
    endDateError: "End date cannot be earlier than the start date.",
    counts: "Counts",
    totalOrderCount: "Total number of work orders",
    completedOrderCount: "Number of work orders completed",
    depositedToShelf: "Removed from warehouse to shelves",
    productOnShelf: "Product in the ShelfReyondaki Ürün",
    productNotFound: "Product not found",
    productSingle: "Single product",
    defective: "Defective product",
    notProcessed: "No action taken",
    times: "Durations (minutes)",
    averageCompletedCreationTime: "Average Occurrence Time of Completeds",
    averageCompletedTime: "Average Completion Time",
    performance: "Performance",
    performancePercentage: "Performance (%)",
    firstCompletedRecordDate: "First Work Order Issued Time",
    lastCompletedRecordDate: "Last Work Order Issued Time",
    reportNotFound: "No suitable report was found between the specified dates.",
    completionOfSalesShortageRequestNotFound: "No sales shortage completion request was made.",
    completionOfSalesShortageTitle: "{{storeName}} sales shortage completion evaluation between {{startDate}} - {{endDate}}",
    floDigitalUsageTitle: "Flo Digital usage evaluation between {{startDate}} - {{endDate}}",
    salesLossTitle: "Sales loss evaluation between {{startDate}} - {{endDate}}",
    salesLossNotFound: "No sales loss was found.",
    salesLossRequestCount: "Total number of stock inquiries",
    salesLossNoStock: "Out of stock count",
    potencialSalesLoss: "Loss of potential sales",
    salesLossSalesCountFromOthers: "Number of lost sales",
    dateNotFound: 'No data',
    automaticWorkOrderHours: "Automatic Work Order Hours Defined on {{startDate}}"
  },
  storeWarehouse: {
    warehouseOperations: "Warehouse Operations",
    warehouseIdentification: "Warehouse Identification",
    warehouseUnitIdentification: "Warehouse Unit Identification",
    productPlacementInTheWarehouse: "Product Placement in the Warehouse",
    rayonIdentification: "Rayon Identification",
    userAssignments: "User Assignments",
    removeProductFromWarehouse: "Remove Product from Warehouse",
    warehouseActivityReport: "Warehouse Activity Report",
    productSearch: "Product Search",
    warehouseInventoryReport: "Warehouse Inventory Report",
    warehouseScreen: "Warehouse Screen",
    warehouseName: "Warehouse Name",
    description: "Description",
    add: "Add",
    cancel: "Cancel",
    delete: "Delete",
    edit: "Edit",
    selectWarehouse: "Select Warehouse",
    selectAll: "Select All",
    addUnit: "Add Unit",
    unitName: "Unit Name",
    done: "Done",
    search: " Search",
    qrPrinting: "QR Printing",
    warehouseProductPlacement: "Warehouse Product Placement",
    scanEnterQr: "Scan / Enter Qr",
    scanEnterBarcode: "Scan / Enter Barcode",
    camera: "Camera",
    barcode: "Barcode",
    warehouse: "Warehouse",
    noRayonFound: "No Rayon Found",
    rayonName: "Rayon Name",
    warehouseUserList: "Warehouse User List",
    rayon: "Rayon",
    noDefinedWarehouseUserFound: "No Defined Warehouse User Found",
    selectStaff: "Select Staff",
    definedAisleUserNotFound: "Defined Aisle User Not Found",
    selectSection: "Select Section",
    readEnterUnitQR: "Read / Enter Unit QR",
    removeAllProductsfromTheUnit: "Remove All Products from the Unit",
    removeAllProductsFromTheWarehouse: "Remove All Products from the Warehouse",
    allProductsWarehouseDeleted: "All products in the warehouse will be deleted! Do you want to continue?",
    confirm: "Confirm",
    allProductsUnitDeleted: "All Products in the unit will be deleted! Do you want to continue?",
    warehouseReports: "Warehouse Reports",
    startDate: "Start Date",
    endDate: "End Date",
    noSuitableReportsSpecifiedDates: "No suitable reports were found between the specified dates.",
    theStartDateCannotGreaterEndDate: "The start date cannot be greater than the end date",
    warehouseProductSearch: "Warehouse Product Search",
    allWarehouses: "All Warehouses",
    unitReport: "Unit Report",
    productReport: "Product Report",
    search1: "Search",
    warehouseProductRequests: "Warehouse Product Requests",
    workOrders: "Work Orders",
    completedTransactions: "Completed Transactions",
    addressInformation: "Address Information",
    sKU: "SKU",
    definition: "Definition",
    requestedUser: "Requested User",
    requestTime: "Request Time",
    requestNote: "Request Note",
    status: "Status",
    process: "Process",
    putIntoProcess: "Put into Process",
    refresh: "Refresh",
    noWarehouseFound: "No Warehouse Found",
    productRequests: "Product Requests",
    aisleDeviceIdentification: "Aisle Device Identification",
    save: "Save",
    sureWantSaveProducts: "Are You Sure You Want to Save Products ?",
    shelf: "Shelf",
    totalNumberBarcodes: "Total number of barcodes",
    sureWantDeleteDefinedUser: "Are you sure you want to delete the defined user?",
    user: "User",
    addUserWarehouse: "Add User to Warehouse",
    theEndDateCannotBeforeStartDate: "The end date cannot be before the start date.",
    totalNumberRequests: "Total number of requests",
    realized: "Realized",
    unrealized: "Unrealized",
    timesMinutes: "Times (minutes)",
    numberValidRequests: "Number of Valid Requests",
    average: "Average",
    shortest: "Shortest",
    longest: "Longest",
    median: "Median",
    noRequestsWarehouse: "No requests were made from the warehouse.",
    evaluationProductRequestsWarehouse: "Evaluation of product requests from the warehouse between {{startDate}} - {{endDate}}",
    completedWorks: "Completed Works",
    address: "Address",
    size: "Size",
    requestor: "Requestor",
    demandStatus: "Demand Status",
    productNotFound: "Product Not Found",
    completed: "Completed",
    requestUnrealized: "Request Unrealized",
    noPendingWorkOrders: "No Pending Work Orders",
    noWorkCompleted: "No Work Completed",
    requestingUser: "Requesting User",
    new: "New",
    inProcess: "In process",
    ok: "OK",
    code: "Code",
    aisleDevices: "Aisle Devices",
    name: "Name",
    code1: "Code",
    recordNotFound: "Record Not Found",
    selectFile: "Select File",
    selectFile1: "Select File",
    pleaseMakeSureBarcodeShelfEnteredCorrectly: "Please make sure that the Barcode and Shelf Unit field is entered correctly!",
    fileEmptyFormattedIncorrectly: "The file is empty or formatted incorrectly!",
    operationSuccessful: "The operation was successful",
    problemOccurredDuringDrocessingMessage: "A problem occurred during processing. \n Please check the information you submitted, make sure all fields are filled and the barcode is entered correctly. If the problem persists, contact the technical support team with the transaction documentation."
  },
  mertechPrinter:{
    bluetoothEnable: "Please turn on your phone's Bluetooth.",
    open: "Open",
    cancel: "Cancel"
  }
};
