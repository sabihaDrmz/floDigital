import GBK from './gbk.min';
import { Alert } from "react-native";
export function hexStringToBuff(data){
    let packageLength = 200, printData = null, arr= null;
    var sendData = [];
        for (let i = 0; i < data.length / packageLength; i++) {
          var ble_begin = i * packageLength
          var ble_end = packageLength * (i + 1);
          var newBuffer = null;
          if (ble_end > data.length) {
            const newBuffer = data.slice(ble_begin);
            printData = GBK.encode(newBuffer)
            sendData[i] = ab2hex(printData);
          }else {
            const newBuffer = data.slice(ble_begin, ble_end);
            printData = GBK.encode(newBuffer)
            sendData[i] = ab2hex(printData);
          }
        }
        arr = sendData
  return arr
}
  function ab2hex(buffer) {
    var hexArr = Array.prototype.map.call(
      new Uint8Array(buffer),
      function(bit) {
        return ('00' + bit.toString(16)).slice(-2)
      }
    )
    return hexArr.join(' ');
  }

export const formatTime = _0x4cdd7d => {
    const _0x5e0341 = _0x4cdd7d['getFullYear']();
    const _0x45c7bb = _0x4cdd7d['getMonth']() + (0x94cd5 ^ 0x94cd4);
    const _0x3ad93e = _0x4cdd7d['getDate']();
    const _0x245ba7 = _0x4cdd7d['getHours']();
    const _0x657bac = _0x4cdd7d['getMinutes']();
    const _0x5939ef = _0x4cdd7d['getSeconds']();
    const _0x35d3b2 = _0x4cdd7d['getMilliseconds']();
    return [_0x5e0341, _0x45c7bb, _0x3ad93e]['map'](formatNumber)['join']('/') + '\x20' + [_0x245ba7, _0x657bac, _0x5939ef]['map'](formatNumber)['join'](':') + '\x20' + _0x35d3b2;
};
const formatNumber = _0x3f5f16 => {
    _0x3f5f16 = _0x3f5f16['toString']();
    return _0x3f5f16[0xf3944 ^ 0xf3945] ? _0x3f5f16 : '0' + _0x3f5f16;
};
const a = _0x35b6df => {
    var _0x36f0f2 = '';
    for (let _0x5d3520 = 0x95bfd ^ 0x95bfd; _0x5d3520 < _0x35b6df['length']; _0x5d3520++) {
        if (_0x5d3520 % (0xe7df9 ^ 0xe7dfb) == (0x22f94 ^ 0x22f94) && _0x5d3520 != (0x777ab ^ 0x777ab)) {
            _0x36f0f2 += '\x20' + _0x35b6df[_0x5d3520];
        } else {
            _0x36f0f2 += _0x35b6df[_0x5d3520];
        }
    }
    console['log'](_0x36f0f2);
    return _0x36f0f2;
};
const convertToMonoImage = (_0xaf7e53, _0x13ab2a) => {
    var _0x816acd = _0xaf7e53['width'];
    var _0x1d3ebc = _0xaf7e53['height'];
    var _0x43b6d2 = _0xaf7e53['data'];
    var _0x218b30 = 0xd7aa0 ^ 0xd7a1e;
    var _0x14bdb6 = 0x1a027 ^ 0x1a027, _0x57c578 = 0x66f6e ^ 0x66f6e;
    var _0x4abbaf = 0x42898 ^ 0x42898, _0x406a5a = 0x0;
    var _0x21a626 = 0x0;
    var _0x5cf0e5 = [[0x2, 0x6c3f4 ^ 0x6c376, 0x22, 0xa2, 0xa, 0x8a, 0xb4b94 ^ 0xb4bbe, 0x7df69 ^ 0x7dfc3], [0xc95d8 ^ 0xc951a, 0x42, 0x8564e ^ 0x856ac, 0x62, 0xca, 0xb0d5f ^ 0xb0d15, 0xea, 0x6a], [0xeeddc ^ 0xeedee, 0x525a8 ^ 0x5251a, 0x33b64 ^ 0x33b76, 0xd98be ^ 0xd982c, 0xbce11 ^ 0xbce2b, 0x3a876 ^ 0x3a8cc, 0x1a, 0x9a], [0xf2, 0x2678a ^ 0x267f8, 0xd2, 0x52, 0xe21e8 ^ 0xe2112, 0x7a, 0xda, 0x5a], [0xbdcc0 ^ 0xbdcce, 0x91150 ^ 0x911de, 0xcacca ^ 0xcace4, 0xae, 0x6, 0x2b641 ^ 0x2b6c7, 0x26, 0xa6], [0xce, 0x4e, 0x7a646 ^ 0x7a6a8, 0x6e, 0xc6, 0xc2d5f ^ 0xc2d19, 0xe6, 0x92b56 ^ 0x92b30], [0x3e, 0xbe, 0x1e, 0x1c34f ^ 0x1c3d1, 0xc5ad2 ^ 0xc5ae4, 0xb6, 0x16, 0x96], [0x5e1d7 ^ 0x5e129, 0x7e, 0xde, 0x5e, 0xf6, 0x9d9fb ^ 0x9d98d, 0xdbfb0 ^ 0xdbf66, 0x56]];
    var _0x568e5c = new Array((_0x816acd + 0x7 >> 0x3) * _0x1d3ebc);
    var _0x4f7082, _0xbe256d;
    for (_0x14bdb6 = 0x0; _0x14bdb6 < _0x1d3ebc; _0x14bdb6++) {
        for (_0x57c578 = 0x0; _0x57c578 < _0x816acd;) {
            _0x4f7082 = _0x57c578 & (0xe285b ^ 0xe285c);
            if ((0x665e4 ^ 0x665e4) == _0x13ab2a) {
                _0x218b30 = _0x5cf0e5[_0x14bdb6 & 0x7][_0x4f7082];
            }
            _0xbe256d = _0x43b6d2[_0x4abbaf++] * 0.29891 + _0x43b6d2[_0x4abbaf++] * 0.58661 + _0x43b6d2[_0x4abbaf++] * 0.11448;
            _0x4abbaf++;
            if (_0xbe256d < _0x218b30) {
                _0x21a626 |= (0xd6caa ^ 0xd6c2a) >> _0x4f7082;
            }
            _0x57c578++;
            if (_0x4f7082 == (0xe9b85 ^ 0xe9b82) || _0x57c578 == _0x816acd) {
                _0x568e5c[_0x406a5a++] = _0x21a626;
                _0x21a626 = 0x0;
            }
        }
    }
    return _0x568e5c;
};
module['exports'] = {
    'formatTime': formatTime,
    'convertToMonoImage': convertToMonoImage,
    'hexStringToBuff': hexStringToBuff,
};


export const alertCustom = (text)=> {
  Alert.alert('提示', text, [{ text: '确定', onPress: () => { } }]);
}
